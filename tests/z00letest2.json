{
    "args": "-DSID=sys1 -Idata/snippets --json=2 data/letest.yaml",
    "rc": 0,
    "out": [
        "{",
        "  \"sid\": \"sys1\",",
        "  \"snat\": true,",
        "  \"sgs\": {",
        "    \"basic\": [",
        "      \"22/tcp\",",
        "      \"443/tcp\"",
        "    ]",
        "  },",
        "  \"nets\": {",
        "    \"1\": {",
        "      \"vms\": {",
        "        \"1\": {",
        "          \"image\": \"Standard_Ubuntu_22.04_latest\",",
        "          \"image_size\": 16,",
        "          \"flavor\": \"s3.medium.4\",",
        "          \"eip\": true,",
        "          \"sg\": [",
        "            \"22/tcp\",",
        "            \"80/tcp\",",
        "            \"443/tcp\"",
        "          ],",
        "          \"user_data\": {",
        "            \"debug\": true,",
        "            \"disable_root\": false,",
        "            \"package_update\": true,",
        "            \"package_reboot_if_required\": true,",
        "            \"packages\": [",
        "              \"pwgen\",",
        "              \"micro\",",
        "              \"python3-venv\",",
        "              \"zip\",",
        "              \"sslh\",",
        "              \"dos2unix\",",
        "              \"apache2\"",
        "            ],",
        "            \"write_files\": [",
        "              {",
        "                \"owner\": \"root:root\",",
        "                \"path\": \"/etc/apache2/sites-available/sys1.otc1.cloudkit7.xyz.conf\",",
        "                \"permissions\": \"0644\",",
        "                \"content\": \"<IfModule mod_ssl.c>\\n  <VirtualHost 127.0.00.1:8443>\\n    ServerAdmin admin@localhost\\n    ServerName sys1.otc1.cloudkit7.xyz\\n    DocumentRoot /var/www/html\\n\\n    #   A self-signed (snakeoil) certificate can be created by installing\\n    #   the ssl-cert package. See\\n    #   /usr/share/doc/apache2/README.Debian.gz for more info.\\n    #   If both key and certificate are stored in the same file, only the\\n    #   SSLCertificateFile directive is needed.\\n    SSLCertificateFile      /etc/ssl/selfsigned/sys1.otc1.cloudkit7.xyz/sys1.otc1.cloudkit7.xyz.cer\\n    SSLCertificateKeyFile   /etc/ssl/selfsigned/sys1.otc1.cloudkit7.xyz/sys1.otc1.cloudkit7.xyz.key\\n\\n    #   SSL Engine Switch:\\n    #   Enable/Disable SSL for this virtual host.\\n    SSLEngine on\\n\\n    # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,\\n    # - error, crit, alert, emerg.\\n    # It is also possible to configure the loglevel for particular\\n    # modules, e.g.\\n    #LogLevel info ssl:warn\\n\\n    ErrorLog ${APACHE_LOG_DIR}/error.log\\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\\n\\n    # For most configuration files from conf-available/, which are\\n    # enabled or disabled at a global level, it is possible to\\n    # .include a line for only one particular virtual host. For example the\\n    # following line enables the CGI configuration for this host only\\n    # after it has been globally disabled with \\\"a2disconf\\\".\\n    #Include conf-available/serve-cgi-bin.conf\\n\\n    #   Server Certificate Chain:\\n    #   Point SSLCertificateChainFile at a file containing the\\n    #   concatenation of PEM encoded CA certificates which form the\\n    #   certificate chain for the server certificate. Alternatively\\n    #   the referenced file can be the same as SSLCertificateFile\\n    #   when the CA certificates are directly appended to the server\\n    #   certificate for convinience.\\n    #SSLCertificateChainFile /etc/apache2/ssl.crt/server-ca.crt\\n\\n    #   Certificate Authority (CA):\\n    #   Set the CA certificate verification path where to find CA\\n    #   certificates for client authentication or alternatively one\\n    #   huge file containing all of them (file must be PEM encoded)\\n    #   Note: Inside SSLCACertificatePath you need hash symlinks\\n    #                to point to the certificate files. Use the provided\\n    #                Makefile to update the hash symlinks after changes.\\n    #SSLCACertificatePath /etc/ssl/certs/\\n    #SSLCACertificateFile /etc/apache2/ssl.crt/ca-bundle.crt\\n\\n    #   Certificate Revocation Lists (CRL):\\n    #   Set the CA revocation path where to find CA CRLs for client\\n    #   authentication or alternatively one huge file containing all\\n    #   of them (file must be PEM encoded)\\n    #   Note: Inside SSLCARevocationPath you need hash symlinks\\n    #                to point to the certificate files. Use the provided\\n    #                Makefile to update the hash symlinks after changes.\\n    #SSLCARevocationPath /etc/apache2/ssl.crl/\\n    #SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl\\n\\n    #   Client Authentication (Type):\\n    #   Client certificate verification type and depth.  Types are\\n    #   none, optional, require and optional_no_ca.  Depth is a\\n    #   number which specifies how deeply to verify the certificate\\n    #   issuer chain before deciding the certificate is not valid.\\n    #SSLVerifyClient require\\n    #SSLVerifyDepth  10\\n\\n    #   SSL Engine Options:\\n    #   Set various options for the SSL engine.\\n    #   o FakeBasicAuth:\\n    #        Translate the client X.509 into a Basic Authorisation.  This means that\\n    #        the standard Auth/DBMAuth methods can be used for access control.  The\\n    #        user name is the `one line' version of the client's X.509 certificate.\\n    #        Note that no password is obtained from the user. Every entry in the user\\n    #        file needs this password: `xxj31ZMTZzkVA'.\\n    #   o ExportCertData:\\n    #        This exports two additional environment variables: SSL_CLIENT_CERT and\\n    #        SSL_SERVER_CERT. These contain the PEM-encoded certificates of the\\n    #        server (always existing) and the client (only existing when client\\n    #        authentication is used). This can be used to import the certificates\\n    #        into CGI scripts.\\n    #   o StdEnvVars:\\n    #        This exports the standard SSL/TLS related `SSL_*' environment variables.\\n    #        Per default this exportation is switched off for performance reasons,\\n    #        because the extraction step is an expensive operation and is usually\\n    #        useless for serving static content. So one usually enables the\\n    #        exportation for CGI and SSI requests only.\\n    #   o OptRenegotiate:\\n    #        This enables optimized SSL connection renegotiation handling when SSL\\n    #        directives are used in per-directory context.\\n    #SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire\\n    <FilesMatch \\\"\\\\.(cgi|shtml|phtml|php)$\\\">\\n                    SSLOptions +StdEnvVars\\n    </FilesMatch>\\n    <Directory /usr/lib/cgi-bin>\\n                    SSLOptions +StdEnvVars\\n    </Directory>\\n\\n    #   SSL Protocol Adjustments:\\n    #   The safe and default but still SSL/TLS standard compliant shutdown\\n    #   approach is that mod_ssl sends the close notify alert but doesn't wait for\\n    #   the close notify alert from client. When you need a different shutdown\\n    #   approach you can use one of the following variables:\\n    #   o ssl-unclean-shutdown:\\n    #        This forces an unclean shutdown when the connection is closed, i.e. no\\n    #        SSL close notify alert is send or allowed to received.  This violates\\n    #        the SSL/TLS standard but is needed for some brain-dead browsers. Use\\n    #        this when you receive I/O errors because of the standard approach where\\n    #        mod_ssl sends the close notify alert.\\n    #   o ssl-accurate-shutdown:\\n    #        This forces an accurate shutdown when the connection is closed, i.e. a\\n    #        SSL close notify alert is send and mod_ssl waits for the close notify\\n    #        alert of the client. This is 100% SSL/TLS standard compliant, but in\\n    #        practice often causes hanging connections with brain-dead browsers. Use\\n    #        this only for browsers where you know that their SSL implementation\\n    #        works correctly.\\n    #   Notice: Most problems of broken clients are also related to the HTTP\\n    #   keep-alive facility, so you usually additionally want to disable\\n    #   keep-alive for those clients, too. Use variable \\\"nokeepalive\\\" for this.\\n    #   Similarly, one has to force some clients to use HTTP/1.0 to workaround\\n    #   their broken HTTP/1.1 implementation. Use variables \\\"downgrade-1.0\\\" and\\n    #   \\\"force-response-1.0\\\" for this.\\n    # BrowserMatch \\\"MSIE [2-6]\\\" \\\\\\n    #               nokeepalive ssl-unclean-shutdown \\\\\\n    #               downgrade-1.0 force-response-1.0\\n\\n  </VirtualHost>\\n</IfModule>\\n\"",
        "              }",
        "            ],",
        "            \"users\": [",
        "              {",
        "                \"name\": \"linux\",",
        "                \"sudo\": [",
        "                  \"ALL=(ALL) NOPASSWD:ALL\"",
        "                ],",
        "                \"groups\": \"users\",",
        "                \"lock_passwd\": false,",
        "                \"shell\": \"/bin/bash\",",
        "                \"passwd\": \"$5$___$_________\",",
        "                \"ssh_authorized_keys\": [",
        "                  \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCS4eT8YdhN7oXM4FfWiR84od1OpI6xSCX+2PzxhGDiBn2zWTTDbFLcyoz/eZUXC/AmNvCxRs2hvjPBzSx8SB8S4c7uxK7OxtZLHt5zi1NfXu7CAFVWjVusoq80gQWtpCEZthuOmwXZ6Q1IcH6fVTr5iWsKYepRPalXRa7KAUU/n3Kdx8rlymihGQCFGfe1NhngipM0CeMPKAkTG7pR+ko2hVG3X8MCikC4COl6UF3515PjvhkJpV2BkUT832x/yugei7wW77YXVm8VOmU48vPRkeMTKSxoNYsnfTovfztqhac365DpQw20UZTQIciDMe4YonRc1iU7RS9TP2I49EQ3 linux\"",
        "                ]",
        "              }",
        "            ],",
        "            \"runcmd\": [",
        "              \"growpart /dev/vda 1\",",
        "              \"resize2fs /dev/vda1\",",
        "              \"for i in $(resolvectl status | grep Link | cut -d\\\"(\\\" -f2 | cut -d\\\")\\\" -f1) ; do resolvectl domain $i sys1.nova ; done\",",
        "              \"[ ! -f /etc/rc.local ] && ( echo '#!/bin/bash' > /etc/rc.local ; chmod 755 /etc/rc.local )\",",
        "              \"echo 'for i in $(resolvectl status | grep Link | cut -d\\\"(\\\" -f2 | cut -d\\\")\\\" -f1) ; do resolvectl domain $i sys1.nova ; done' >> /etc/rc.local\",",
        "              \"sed -i~ -e 's/^127\\\\.0\\\\.0\\\\.1\\\\s*.*$/127.0.0.1 localhost '$(uname -n)'/' /etc/hosts\",",
        "              \"sed -i~ -e 's/^.*AllowTcpForwarding.*/AllowTcpForwarding yes/' /etc/ssh/sshd_config\",",
        "              \"service sshd restart\",",
        "              \"sed -i~ -e 's/Listen 443[^0-9]*$/Listen 127.0.00.1:8443 https/' /etc/apache2/ports.conf\",",
        "              \"sed -i~ -e 's/<change-me>/0.0.0.0/' -e 's/--ssl 127.0.0.1:443/--tls 127.0.00.1:8443/' /etc/default/sslh\",",
        "              \"service sslh restart\",",
        "              \"mkdir -p /etc/ssl/selfsigned\",",
        "              \"printf '#!/bin/sh\\\\nmkdir -p /etc/ssl/selfsigned/\\\"$1\\\"\\\\nopenssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj \\\"/C=NL/ST=ZH/L=Den Haag/O=TSNL/CN=$*\\\" -keyout /etc/ssl/selfsigned/$1/$1.key  -out /etc/ssl/selfsigned/$1/$1.cer\\\\n' > /usr/local/bin/selfsigned\",",
        "              \"chmod 755 /usr/local/bin/selfsigned\",",
        "              \"/usr/local/bin/selfsigned sys1.otc1.cloudkit7.xyz\",",
        "              \"a2ensite sys1.otc1.cloudkit7.xyz\",",
        "              \"a2enmod ssl\",",
        "              \"a2enmod proxy\",",
        "              \"a2enmod proxy_http\",",
        "              \"a2enmod proxy_wstunnel\",",
        "              \"service apache2 restart\"",
        "            ]",
        "          },",
        "          \"cname\": \"sys1\"",
        "        }",
        "      }",
        "    }",
        "  }",
        "}"
    ],
    "err": [
        ""
    ],
    "md5": null
}
