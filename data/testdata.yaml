- - -h
  - 0
  - - 'usage: ypp [-h] [-D DEFINE] [-I INCLUDE] [-C CONFIG] [-J] [-V] [-o OUTPUT]'
    - '           [-n] [--unix] [--windows]'
    - '           [file ...]'
    - ''
    - YAML file pre-processor
    - ''
    - 'positional arguments:'
    - '  file                  YAML file to parse'
    - ''
    - 'options:'
    - '  -h, --help            show this help message and exit'
    - '  -D DEFINE, --define DEFINE'
    - '                        Add constant'
    - '  -I INCLUDE, --include INCLUDE'
    - '                        Add Include path'
    - '  -C CONFIG, --config CONFIG'
    - '                        Read configuration file'
    - '  -J, --json            Parse YAML and dump JSON'
    - '  -V, --version         show program''s version number and exit'
    - '  -o OUTPUT, --output OUTPUT'
    - '                        Save output to the given file'
    - '  -n, --no-pp           Disable pre-processor'
    - '  --unix                Force UNIX mode output'
    - '  --windows             Force Windows mode output'
    - ''
  - - ''
- - -Idata/snippets --json data/demo2.yaml
  - 0
  - - '{'
    - '  "snat": true,'
    - '  "sgs": {'
    - '    "standard": ['
    - '      "22/tcp",'
    - '      "443/tcp",'
    - '      "8080/tcp"'
    - '    ]'
    - '  },'
    - '  "nets": {'
    - '    "1": {'
    - '      "sn_size": 7,'
    - '      "vms": {'
    - '        "1": {'
    - '          "image": "Standard_Ubuntu_22.04_latest",'
    - '          "image_size": 16,'
    - '          "flavor": "s3.medium.1",'
    - '          "eip": true,'
    - '          "cname": "*.demoapps",'
    - '          "sg": ['
    - '            "22/tcp",'
    - '            "443/tcp"'
    - '          ],'
    - '          "vols": {'
    - '            "1": {'
    - '              "size": 20'
    - '            }'
    - '          },'
    - '          "user_data": {'
    - '            "package_update": true,'
    - '            "package_reboot_if_required": true,'
    - '            "packages": ['
    - '              "pwgen",'
    - '              "micro",'
    - '              "python3-venv",'
    - '              "zip"'
    - '            ],'
    - '            "users": ['
    - '              {'
    - '                "name": "linux",'
    - '                "sudo": ['
    - '                  "ALL=(ALL) NOPASSWD:ALL"'
    - '                ],'
    - '                "groups": "users",'
    - '                "lock_passwd": false,'
    - '                "shell": "/bin/bash",'
    - "                \"passwd\": \"\x01___$\","
    - '                "ssh_authorized_keys": ['
    - '                  "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDSEvM7HAgHOIs6GZPVNJMa1Wqzcyk1JcV+hSkoNAf54sF0BbEX6eaA0Vkw7oT9PZPiCTEXdXS4rjApFWvGUj7RWVJiHL5uCGJgqcZsfUyW9YgPFo0HpNWJbxCVt+cxZi1GfO94o3xUVsWYxpDAkIi5uxOGlxhgi8UTAIt2cjIayNwh2V97EDIxGFBEC+tfdiRf4v6Uz0U6r+UMCx6LpOzxdYbKxk/ggShIZZu+AU/p8ykx7iEhYkngTuYY+cGZHa3iUVNf+gJXwjCzvxPj94ml/p5Emq15ICsflzUVLLNJJEdJhsJ2pGR5MgSHjgTlvx1ldJ/QjpuVYtJpbZgpRVk9/Oc682PY8heZMyV7VNWbjyotwMhvC/3SCpibDFLaS71gw+N0d8eTIngTXQY7f40rNEPVVhductmfhr6/qeKdj32JSumyHkGimoWGBOo/p0e/2HgF3SaOkxD5StxL9ljPSKG3p3+pguQj9/EjEraD3jKlc3+VF5G3q/afbEWL82fKlvUEUWddTAA1bzqqBEXFqdaRRgQJtyUlKzkeREzptNJfiOnH3SqA6hXO5UInO5ZrAZQpyOONalw889WoBXwELfYIbYCqBXavabNq7B+1zaYrIRGym5kgSw+7k60St4rwYfJzhTKHXYsTIrVwe16zkI4WAqs9MTCO+Kpn9if3Hw==
      linux"'
    - '                ]'
    - '              }'
    - '            ],'
    - '            "write_files": ['
    - '              {'
    - '                "owner": "root:root",'
    - '                "path": "/root/linux.key",'
    - '                "permissions": "0600",'
    - '                "content": "-----BEGIN RSA PRIVATE KEY-----\n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\n-----END
      RSA PRIVATE KEY-----\n"'
    - '              }'
    - '            ],'
    - '            "runcmd": ['
    - '              "echo Port 22 >> /etc/ssh/sshd_config",'
    - '              "echo Port 443 >> /etc/ssh/sshd_config",'
    - '              "sed -i~ -e ''s/^.*AllowTcpForwarding.*/AllowTcpForwarding yes/''
      /etc/ssh/sshd_config",'
    - '              "systemctl restart sshd"'
    - '            ]'
    - '          }'
    - '        }'
    - '      }'
    - '    }'
    - '  }'
    - '}'
    - ''
  - - ''
- - -Idata/snippets data/letest.yaml
  - 1
  - - ''
  - - '"data/letest.yaml",2: Must define SID with -DSID=xyz'
    - ''
- - -DSID=sys1 -Idata/snippets --json data/letest.yaml
  - 0
  - - '{'
    - '  "sid": "sys1",'
    - '  "snat": true,'
    - '  "sgs": {'
    - '    "basic": ['
    - '      "22/tcp",'
    - '      "443/tcp"'
    - '    ]'
    - '  },'
    - '  "nets": {'
    - '    "1": {'
    - '      "vms": {'
    - '        "1": {'
    - '          "image": "Standard_Ubuntu_22.04_latest",'
    - '          "image_size": 16,'
    - '          "flavor": "s3.medium.4",'
    - '          "eip": true,'
    - '          "sg": ['
    - '            "22/tcp",'
    - '            "80/tcp",'
    - '            "443/tcp"'
    - '          ],'
    - '          "user_data": {'
    - '            "debug": true,'
    - '            "disable_root": false,'
    - '            "package_update": true,'
    - '            "package_reboot_if_required": true,'
    - '            "packages": ['
    - '              "pwgen",'
    - '              "micro",'
    - '              "python3-venv",'
    - '              "zip",'
    - '              "sslh",'
    - '              "dos2unix",'
    - '              "apache2"'
    - '            ],'
    - '            "write_files": ['
    - '              {'
    - '                "owner": "root:root",'
    - '                "path": "/etc/apache2/sites-available/sys1.otc1.cloudkit7.xyz.conf",'
    - '                "permissions": "0644",'
    - '                "content": "<IfModule mod_ssl.c>\n  <VirtualHost 127.0.00.1:8443>\n    ServerAdmin
      admin@localhost\n    ServerName sys1.otc1.cloudkit7.xyz\n    DocumentRoot /var/www/html\n\n    #   A
      self-signed (snakeoil) certificate can be created by installing\n    #   the
      ssl-cert package. See\n    #   /usr/share/doc/apache2/README.Debian.gz for more
      info.\n    #   If both key and certificate are stored in the same file, only
      the\n    #   SSLCertificateFile directive is needed.\n    SSLCertificateFile      /etc/ssl/selfsigned/sys1.otc1.cloudkit7.xyz/sys1.otc1.cloudkit7.xyz.cer\n    SSLCertificateKeyFile   /etc/ssl/selfsigned/sys1.otc1.cloudkit7.xyz/sys1.otc1.cloudkit7.xyz.key\n\n    #   SSL
      Engine Switch:\n    #   Enable/Disable SSL for this virtual host.\n    SSLEngine
      on\n\n    # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,\n    #
      - error, crit, alert, emerg.\n    # It is also possible to configure the loglevel
      for particular\n    # modules, e.g.\n    #LogLevel info ssl:warn\n\n    ErrorLog
      ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n    #
      For most configuration files from conf-available/, which are\n    # enabled
      or disabled at a global level, it is possible to\n    # .include a line for
      only one particular virtual host. For example the\n    # following line enables
      the CGI configuration for this host only\n    # after it has been globally disabled
      with \"a2disconf\".\n    #Include conf-available/serve-cgi-bin.conf\n\n    #   Server
      Certificate Chain:\n    #   Point SSLCertificateChainFile at a file containing
      the\n    #   concatenation of PEM encoded CA certificates which form the\n    #   certificate
      chain for the server certificate. Alternatively\n    #   the referenced file
      can be the same as SSLCertificateFile\n    #   when the CA certificates are
      directly appended to the server\n    #   certificate for convinience.\n    #SSLCertificateChainFile
      /etc/apache2/ssl.crt/server-ca.crt\n\n    #   Certificate Authority (CA):\n    #   Set
      the CA certificate verification path where to find CA\n    #   certificates
      for client authentication or alternatively one\n    #   huge file containing
      all of them (file must be PEM encoded)\n    #   Note: Inside SSLCACertificatePath
      you need hash symlinks\n    #                to point to the certificate files.
      Use the provided\n    #                Makefile to update the hash symlinks
      after changes.\n    #SSLCACertificatePath /etc/ssl/certs/\n    #SSLCACertificateFile
      /etc/apache2/ssl.crt/ca-bundle.crt\n\n    #   Certificate Revocation Lists (CRL):\n    #   Set
      the CA revocation path where to find CA CRLs for client\n    #   authentication
      or alternatively one huge file containing all\n    #   of them (file must be
      PEM encoded)\n    #   Note: Inside SSLCARevocationPath you need hash symlinks\n    #                to
      point to the certificate files. Use the provided\n    #                Makefile
      to update the hash symlinks after changes.\n    #SSLCARevocationPath /etc/apache2/ssl.crl/\n    #SSLCARevocationFile
      /etc/apache2/ssl.crl/ca-bundle.crl\n\n    #   Client Authentication (Type):\n    #   Client
      certificate verification type and depth.  Types are\n    #   none, optional,
      require and optional_no_ca.  Depth is a\n    #   number which specifies how
      deeply to verify the certificate\n    #   issuer chain before deciding the certificate
      is not valid.\n    #SSLVerifyClient require\n    #SSLVerifyDepth  10\n\n    #   SSL
      Engine Options:\n    #   Set various options for the SSL engine.\n    #   o
      FakeBasicAuth:\n    #        Translate the client X.509 into a Basic Authorisation.  This
      means that\n    #        the standard Auth/DBMAuth methods can be used for access
      control.  The\n    #        user name is the `one line'' version of the client''s
      X.509 certificate.\n    #        Note that no password is obtained from the
      user. Every entry in the user\n    #        file needs this password: `xxj31ZMTZzkVA''.\n    #   o
      ExportCertData:\n    #        This exports two additional environment variables:
      SSL_CLIENT_CERT and\n    #        SSL_SERVER_CERT. These contain the PEM-encoded
      certificates of the\n    #        server (always existing) and the client (only
      existing when client\n    #        authentication is used). This can be used
      to import the certificates\n    #        into CGI scripts.\n    #   o StdEnvVars:\n    #        This
      exports the standard SSL/TLS related `SSL_*'' environment variables.\n    #        Per
      default this exportation is switched off for performance reasons,\n    #        because
      the extraction step is an expensive operation and is usually\n    #        useless
      for serving static content. So one usually enables the\n    #        exportation
      for CGI and SSI requests only.\n    #   o OptRenegotiate:\n    #        This
      enables optimized SSL connection renegotiation handling when SSL\n    #        directives
      are used in per-directory context.\n    #SSLOptions +FakeBasicAuth +ExportCertData
      +StrictRequire\n    <FilesMatch \"\\.(cgi|shtml|phtml|php)$\">\n                    SSLOptions
      +StdEnvVars\n    </FilesMatch>\n    <Directory /usr/lib/cgi-bin>\n                    SSLOptions
      +StdEnvVars\n    </Directory>\n\n    #   SSL Protocol Adjustments:\n    #   The
      safe and default but still SSL/TLS standard compliant shutdown\n    #   approach
      is that mod_ssl sends the close notify alert but doesn''t wait for\n    #   the
      close notify alert from client. When you need a different shutdown\n    #   approach
      you can use one of the following variables:\n    #   o ssl-unclean-shutdown:\n    #        This
      forces an unclean shutdown when the connection is closed, i.e. no\n    #        SSL
      close notify alert is send or allowed to received.  This violates\n    #        the
      SSL/TLS standard but is needed for some brain-dead browsers. Use\n    #        this
      when you receive I/O errors because of the standard approach where\n    #        mod_ssl
      sends the close notify alert.\n    #   o ssl-accurate-shutdown:\n    #        This
      forces an accurate shutdown when the connection is closed, i.e. a\n    #        SSL
      close notify alert is send and mod_ssl waits for the close notify\n    #        alert
      of the client. This is 100% SSL/TLS standard compliant, but in\n    #        practice
      often causes hanging connections with brain-dead browsers. Use\n    #        this
      only for browsers where you know that their SSL implementation\n    #        works
      correctly.\n    #   Notice: Most problems of broken clients are also related
      to the HTTP\n    #   keep-alive facility, so you usually additionally want to
      disable\n    #   keep-alive for those clients, too. Use variable \"nokeepalive\"
      for this.\n    #   Similarly, one has to force some clients to use HTTP/1.0
      to workaround\n    #   their broken HTTP/1.1 implementation. Use variables \"downgrade-1.0\"
      and\n    #   \"force-response-1.0\" for this.\n    # BrowserMatch \"MSIE [2-6]\"
      \\\n    #               nokeepalive ssl-unclean-shutdown \\\n    #               downgrade-1.0
      force-response-1.0\n\n  </VirtualHost>\n</IfModule>\n"'
    - '              }'
    - '            ],'
    - '            "users": ['
    - '              {'
    - '                "name": "linux",'
    - '                "sudo": ['
    - '                  "ALL=(ALL) NOPASSWD:ALL"'
    - '                ],'
    - '                "groups": "users",'
    - '                "lock_passwd": false,'
    - '                "shell": "/bin/bash",'
    - "                \"passwd\": \"\x01___$\","
    - '                "ssh_authorized_keys": ['
    - '                  "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDSEvM7HAgHOIs6GZPVNJMa1Wqzcyk1JcV+hSkoNAf54sF0BbEX6eaA0Vkw7oT9PZPiCTEXdXS4rjApFWvGUj7RWVJiHL5uCGJgqcZsfUyW9YgPFo0HpNWJbxCVt+cxZi1GfO94o3xUVsWYxpDAkIi5uxOGlxhgi8UTAIt2cjIayNwh2V97EDIxGFBEC+tfdiRf4v6Uz0U6r+UMCx6LpOzxdYbKxk/ggShIZZu+AU/p8ykx7iEhYkngTuYY+cGZHa3iUVNf+gJXwjCzvxPj94ml/p5Emq15ICsflzUVLLNJJEdJhsJ2pGR5MgSHjgTlvx1ldJ/QjpuVYtJpbZgpRVk9/Oc682PY8heZMyV7VNWbjyotwMhvC/3SCpibDFLaS71gw+N0d8eTIngTXQY7f40rNEPVVhductmfhr6/qeKdj32JSumyHkGimoWGBOo/p0e/2HgF3SaOkxD5StxL9ljPSKG3p3+pguQj9/EjEraD3jKlc3+VF5G3q/afbEWL82fKlvUEUWddTAA1bzqqBEXFqdaRRgQJtyUlKzkeREzptNJfiOnH3SqA6hXO5UInO5ZrAZQpyOONalw889WoBXwELfYIbYCqBXavabNq7B+1zaYrIRGym5kgSw+7k60St4rwYfJzhTKHXYsTIrVwe16zkI4WAqs9MTCO+Kpn9if3Hw==
      linux"'
    - '                ]'
    - '              }'
    - '            ],'
    - '            "runcmd": ['
    - '              "growpart /dev/vda 1",'
    - '              "resize2fs /dev/vda1",'
    - '              "for i in $(resolvectl status | grep Link | cut -d\"(\" -f2 |
      cut -d\")\" -f1) ; do resolvectl domain $i sys1.nova ; done",'
    - '              "[ ! -f /etc/rc.local ] && ( echo ''#!/bin/bash'' > /etc/rc.local
      ; chmod 755 /etc/rc.local )",'
    - '              "echo ''for i in $(resolvectl status | grep Link | cut -d\"(\"
      -f2 | cut -d\")\" -f1) ; do resolvectl domain $i sys1.nova ; done'' >> /etc/rc.local",'
    - '              "sed -i~ -e ''s/^127\\.0\\.0\\.1\\s*.*$/127.0.0.1 localhost ''$(uname
      -n)''/'' /etc/hosts",'
    - '              "sed -i~ -e ''s/^.*AllowTcpForwarding.*/AllowTcpForwarding yes/''
      /etc/ssh/sshd_config",'
    - '              "service sshd restart",'
    - '              "sed -i~ -e ''s/Listen 443[^0-9]*$/Listen 127.0.00.1:8443 https/''
      /etc/apache2/ports.conf",'
    - '              "sed -i~ -e ''s/<change-me>/0.0.0.0/'' -e ''s/--ssl 127.0.0.1:443/--tls
      127.0.00.1:8443/'' /etc/default/sslh",'
    - '              "service sslh restart",'
    - '              "mkdir -p /etc/ssl/selfsigned",'
    - '              "printf ''#!/bin/sh\\nmkdir -p /etc/ssl/selfsigned/\"$1\"\\nopenssl
      req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj \"/C=NL/ST=ZH/L=Den Haag/O=TSNL/CN=$*\"
      -keyout /etc/ssl/selfsigned/$1/$1.key  -out /etc/ssl/selfsigned/$1/$1.cer\\n''
      > /usr/local/bin/selfsigned",'
    - '              "chmod 755 /usr/local/bin/selfsigned",'
    - '              "/usr/local/bin/selfsigned sys1.otc1.cloudkit7.xyz",'
    - '              "a2ensite sys1.otc1.cloudkit7.xyz",'
    - '              "a2enmod ssl",'
    - '              "a2enmod proxy",'
    - '              "a2enmod proxy_http",'
    - '              "a2enmod proxy_wstunnel",'
    - '              "service apache2 restart"'
    - '            ]'
    - '          },'
    - '          "cname": "sys1"'
    - '        }'
    - '      }'
    - '    }'
    - '  }'
    - '}'
    - ''
  - - ''
- - data/xx.yaml
  - 0
  - - '- sed -i~ -e ''s/^127\.0\.0\.1\s*.*$/127.0.0.1 localhost ''$(uname -n)''/''
      /etc/hosts'
    - for i in $(resolvectl status | grep Link | cut -d"(" -f2 | cut -d")" -f1) ;
      do resolvectl domain $i INTDOMAIN ; done
    - ''
  - - ''
- - -Idata/snippets -DSID=tsv2 --json data/ts-v2.yaml
  - 0
  - - '{'
    - '  "sid": "tsv2",'
    - '  "snat": true,'
    - '  "sgs": {'
    - '    "basic": ['
    - '      "22/tcp",'
    - '      "443/tcp"'
    - '    ]'
    - '  },'
    - '  "nets": {'
    - '    "1": {'
    - '      "vms": {'
    - '        "1": {'
    - '          "image": "Standard_Ubuntu_22.04_latest",'
    - '          "image_size": 16,'
    - '          "flavor": "s3.medium.4",'
    - '          "eip": true,'
    - '          "sg": ['
    - '            "22/tcp",'
    - '            "80/tcp",'
    - '            "443/tcp"'
    - '          ],'
    - '          "user_data": {'
    - '            "debug": true,'
    - '            "disable_root": false,'
    - '            "package_update": true,'
    - '            "package_reboot_if_required": true,'
    - '            "packages": ['
    - '              "pwgen",'
    - '              "micro",'
    - '              "python3-venv",'
    - '              "zip",'
    - '              "sslh",'
    - '              "xfce4",'
    - '              "xfce4-goodies",'
    - '              "xubuntu-icon-theme",'
    - '              "gnome-icon-theme",'
    - '              "tango-icon-theme",'
    - '              "firefox",'
    - '              "geany",'
    - '              "tigervnc-viewer",'
    - '              "libvte9",'
    - '              "doc-base",'
    - '              "devhelp",'
    - '              "libnotify-bin",'
    - '              "yelp",'
    - '              "xorg",'
    - '              "xserver-xorg-legacy",'
    - '              "xserver-xorg-video-all",'
    - '              "mesa-utils",'
    - '              "xfonts-base",'
    - '              "xfonts-100dpi",'
    - '              "xfonts-75dpi",'
    - '              "xfonts-scalable",'
    - '              "x11-xserver-utils",'
    - '              "xbitmaps",'
    - '              "xclip",'
    - '              "xrdp",'
    - '              "xorgxrdp",'
    - '              "dos2unix",'
    - '              "docker.io",'
    - '              "apache2",'
    - '              "mariadb-server",'
    - '              "graphviz",'
    - '              "php",'
    - '              "php-mysql",'
    - '              "php-ldap",'
    - '              "php-cli",'
    - '              "php-soap",'
    - '              "php-json",'
    - '              "php-xml",'
    - '              "php-gd",'
    - '              "php-zip",'
    - '              "php-curl",'
    - '              "php-yaml",'
    - '              "libapache2-mod-php",'
    - '              "php-mbstring"'
    - '            ],'
    - '            "write_files": ['
    - '              {'
    - '                "owner": "root:root",'
    - '                "path": "/etc/apache2/sites-available/tsv2.otc1.cloudkit7.xyz.conf",'
    - '                "permissions": "0644",'
    - '                "content": "<IfModule mod_ssl.c>\n  <VirtualHost 127.0.00.1:8443>\n    ServerAdmin
      admin@localhost\n    ServerName tsv2.otc1.cloudkit7.xyz\n    DocumentRoot /var/www/html\n\n    #   A
      self-signed (snakeoil) certificate can be created by installing\n    #   the
      ssl-cert package. See\n    #   /usr/share/doc/apache2/README.Debian.gz for more
      info.\n    #   If both key and certificate are stored in the same file, only
      the\n    #   SSLCertificateFile directive is needed.\n    SSLCertificateFile      /etc/ssl/selfsigned/tsv2.otc1.cloudkit7.xyz/tsv2.otc1.cloudkit7.xyz.cer\n    SSLCertificateKeyFile   /etc/ssl/selfsigned/tsv2.otc1.cloudkit7.xyz/tsv2.otc1.cloudkit7.xyz.key\n\n    #   SSL
      Engine Switch:\n    #   Enable/Disable SSL for this virtual host.\n    SSLEngine
      on\n\n    # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,\n    #
      - error, crit, alert, emerg.\n    # It is also possible to configure the loglevel
      for particular\n    # modules, e.g.\n    #LogLevel info ssl:warn\n\n    ErrorLog
      ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n    #
      For most configuration files from conf-available/, which are\n    # enabled
      or disabled at a global level, it is possible to\n    # .include a line for
      only one particular virtual host. For example the\n    # following line enables
      the CGI configuration for this host only\n    # after it has been globally disabled
      with \"a2disconf\".\n    #Include conf-available/serve-cgi-bin.conf\n\n    #   Server
      Certificate Chain:\n    #   Point SSLCertificateChainFile at a file containing
      the\n    #   concatenation of PEM encoded CA certificates which form the\n    #   certificate
      chain for the server certificate. Alternatively\n    #   the referenced file
      can be the same as SSLCertificateFile\n    #   when the CA certificates are
      directly appended to the server\n    #   certificate for convinience.\n    #SSLCertificateChainFile
      /etc/apache2/ssl.crt/server-ca.crt\n\n    #   Certificate Authority (CA):\n    #   Set
      the CA certificate verification path where to find CA\n    #   certificates
      for client authentication or alternatively one\n    #   huge file containing
      all of them (file must be PEM encoded)\n    #   Note: Inside SSLCACertificatePath
      you need hash symlinks\n    #                to point to the certificate files.
      Use the provided\n    #                Makefile to update the hash symlinks
      after changes.\n    #SSLCACertificatePath /etc/ssl/certs/\n    #SSLCACertificateFile
      /etc/apache2/ssl.crt/ca-bundle.crt\n\n    #   Certificate Revocation Lists (CRL):\n    #   Set
      the CA revocation path where to find CA CRLs for client\n    #   authentication
      or alternatively one huge file containing all\n    #   of them (file must be
      PEM encoded)\n    #   Note: Inside SSLCARevocationPath you need hash symlinks\n    #                to
      point to the certificate files. Use the provided\n    #                Makefile
      to update the hash symlinks after changes.\n    #SSLCARevocationPath /etc/apache2/ssl.crl/\n    #SSLCARevocationFile
      /etc/apache2/ssl.crl/ca-bundle.crl\n\n    #   Client Authentication (Type):\n    #   Client
      certificate verification type and depth.  Types are\n    #   none, optional,
      require and optional_no_ca.  Depth is a\n    #   number which specifies how
      deeply to verify the certificate\n    #   issuer chain before deciding the certificate
      is not valid.\n    #SSLVerifyClient require\n    #SSLVerifyDepth  10\n\n    #   SSL
      Engine Options:\n    #   Set various options for the SSL engine.\n    #   o
      FakeBasicAuth:\n    #        Translate the client X.509 into a Basic Authorisation.  This
      means that\n    #        the standard Auth/DBMAuth methods can be used for access
      control.  The\n    #        user name is the `one line'' version of the client''s
      X.509 certificate.\n    #        Note that no password is obtained from the
      user. Every entry in the user\n    #        file needs this password: `xxj31ZMTZzkVA''.\n    #   o
      ExportCertData:\n    #        This exports two additional environment variables:
      SSL_CLIENT_CERT and\n    #        SSL_SERVER_CERT. These contain the PEM-encoded
      certificates of the\n    #        server (always existing) and the client (only
      existing when client\n    #        authentication is used). This can be used
      to import the certificates\n    #        into CGI scripts.\n    #   o StdEnvVars:\n    #        This
      exports the standard SSL/TLS related `SSL_*'' environment variables.\n    #        Per
      default this exportation is switched off for performance reasons,\n    #        because
      the extraction step is an expensive operation and is usually\n    #        useless
      for serving static content. So one usually enables the\n    #        exportation
      for CGI and SSI requests only.\n    #   o OptRenegotiate:\n    #        This
      enables optimized SSL connection renegotiation handling when SSL\n    #        directives
      are used in per-directory context.\n    #SSLOptions +FakeBasicAuth +ExportCertData
      +StrictRequire\n    <FilesMatch \"\\.(cgi|shtml|phtml|php)$\">\n                    SSLOptions
      +StdEnvVars\n    </FilesMatch>\n    <Directory /usr/lib/cgi-bin>\n                    SSLOptions
      +StdEnvVars\n    </Directory>\n\n    #   SSL Protocol Adjustments:\n    #   The
      safe and default but still SSL/TLS standard compliant shutdown\n    #   approach
      is that mod_ssl sends the close notify alert but doesn''t wait for\n    #   the
      close notify alert from client. When you need a different shutdown\n    #   approach
      you can use one of the following variables:\n    #   o ssl-unclean-shutdown:\n    #        This
      forces an unclean shutdown when the connection is closed, i.e. no\n    #        SSL
      close notify alert is send or allowed to received.  This violates\n    #        the
      SSL/TLS standard but is needed for some brain-dead browsers. Use\n    #        this
      when you receive I/O errors because of the standard approach where\n    #        mod_ssl
      sends the close notify alert.\n    #   o ssl-accurate-shutdown:\n    #        This
      forces an accurate shutdown when the connection is closed, i.e. a\n    #        SSL
      close notify alert is send and mod_ssl waits for the close notify\n    #        alert
      of the client. This is 100% SSL/TLS standard compliant, but in\n    #        practice
      often causes hanging connections with brain-dead browsers. Use\n    #        this
      only for browsers where you know that their SSL implementation\n    #        works
      correctly.\n    #   Notice: Most problems of broken clients are also related
      to the HTTP\n    #   keep-alive facility, so you usually additionally want to
      disable\n    #   keep-alive for those clients, too. Use variable \"nokeepalive\"
      for this.\n    #   Similarly, one has to force some clients to use HTTP/1.0
      to workaround\n    #   their broken HTTP/1.1 implementation. Use variables \"downgrade-1.0\"
      and\n    #   \"force-response-1.0\" for this.\n    # BrowserMatch \"MSIE [2-6]\"
      \\\n    #               nokeepalive ssl-unclean-shutdown \\\n    #               downgrade-1.0
      force-response-1.0\n\n  </VirtualHost>\n</IfModule>\n"'
    - '              }'
    - '            ],'
    - '            "users": ['
    - '              {'
    - '                "name": "linux",'
    - '                "sudo": ['
    - '                  "ALL=(ALL) NOPASSWD:ALL"'
    - '                ],'
    - '                "groups": "users",'
    - '                "lock_passwd": false,'
    - '                "shell": "/bin/bash",'
    - "                \"passwd\": \"\x01___$\","
    - '                "ssh_authorized_keys": ['
    - '                  "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDSEvM7HAgHOIs6GZPVNJMa1Wqzcyk1JcV+hSkoNAf54sF0BbEX6eaA0Vkw7oT9PZPiCTEXdXS4rjApFWvGUj7RWVJiHL5uCGJgqcZsfUyW9YgPFo0HpNWJbxCVt+cxZi1GfO94o3xUVsWYxpDAkIi5uxOGlxhgi8UTAIt2cjIayNwh2V97EDIxGFBEC+tfdiRf4v6Uz0U6r+UMCx6LpOzxdYbKxk/ggShIZZu+AU/p8ykx7iEhYkngTuYY+cGZHa3iUVNf+gJXwjCzvxPj94ml/p5Emq15ICsflzUVLLNJJEdJhsJ2pGR5MgSHjgTlvx1ldJ/QjpuVYtJpbZgpRVk9/Oc682PY8heZMyV7VNWbjyotwMhvC/3SCpibDFLaS71gw+N0d8eTIngTXQY7f40rNEPVVhductmfhr6/qeKdj32JSumyHkGimoWGBOo/p0e/2HgF3SaOkxD5StxL9ljPSKG3p3+pguQj9/EjEraD3jKlc3+VF5G3q/afbEWL82fKlvUEUWddTAA1bzqqBEXFqdaRRgQJtyUlKzkeREzptNJfiOnH3SqA6hXO5UInO5ZrAZQpyOONalw889WoBXwELfYIbYCqBXavabNq7B+1zaYrIRGym5kgSw+7k60St4rwYfJzhTKHXYsTIrVwe16zkI4WAqs9MTCO+Kpn9if3Hw==
      linux"'
    - '                ]'
    - '              }'
    - '            ],'
    - '            "runcmd": ['
    - '              "growpart /dev/vda 1",'
    - '              "resize2fs /dev/vda1",'
    - '              "for i in $(resolvectl status | grep Link | cut -d\"(\" -f2 |
      cut -d\")\" -f1) ; do resolvectl domain $i tsv2.nova ; done",'
    - '              "[ ! -f /etc/rc.local ] && ( echo ''#!/bin/bash'' > /etc/rc.local
      ; chmod 755 /etc/rc.local )",'
    - '              "echo ''for i in $(resolvectl status | grep Link | cut -d\"(\"
      -f2 | cut -d\")\" -f1) ; do resolvectl domain $i tsv2.nova ; done'' >> /etc/rc.local",'
    - '              "sed -i~ -e ''s/^127\\.0\\.0\\.1\\s*.*$/127.0.0.1 localhost ''$(uname
      -n)''/'' /etc/hosts",'
    - '              "sed -i~ -e ''s/^.*AllowTcpForwarding.*/AllowTcpForwarding yes/''
      /etc/ssh/sshd_config",'
    - '              "service sshd restart",'
    - '              "sed -i~ -e ''s/Listen 443[^0-9]*$/Listen 127.0.00.1:8443 https/''
      /etc/apache2/ports.conf",'
    - '              "sed -i~ -e ''s/<change-me>/0.0.0.0/'' -e ''s/--ssl 127.0.0.1:443/--tls
      127.0.00.1:8443/'' /etc/default/sslh",'
    - '              "service sslh restart",'
    - '              "mkdir -p /etc/ssl/selfsigned",'
    - '              "printf ''#!/bin/sh\\nmkdir -p /etc/ssl/selfsigned/\"$1\"\\nopenssl
      req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj \"/C=NL/ST=ZH/L=Den Haag/O=TSNL/CN=$*\"
      -keyout /etc/ssl/selfsigned/$1/$1.key  -out /etc/ssl/selfsigned/$1/$1.cer\\n''
      > /usr/local/bin/selfsigned",'
    - '              "chmod 755 /usr/local/bin/selfsigned",'
    - '              "/usr/local/bin/selfsigned tsv2.otc1.cloudkit7.xyz",'
    - '              "/usr/local/bin/selfsigned tsv2.otc1.cloudkit7.xyz",'
    - '              "a2ensite tsv2.otc1.cloudkit7.xyz",'
    - '              "a2enmod ssl",'
    - '              "a2enmod proxy",'
    - '              "a2enmod proxy_http",'
    - '              "a2enmod proxy_wstunnel",'
    - '              "service apache2 restart"'
    - '            ]'
    - '          },'
    - '          "cname": "tsv2"'
    - '        }'
    - '      }'
    - '    }'
    - '  }'
    - '}'
    - ''
  - - ''
- - -DUSE_ACME -DSID=sys1 -Idata/snippets --json data/letest.yaml
  - 0
  - - '{'
    - '  "sid": "sys1",'
    - '  "snat": true,'
    - '  "sgs": {'
    - '    "basic": ['
    - '      "22/tcp",'
    - '      "443/tcp"'
    - '    ]'
    - '  },'
    - '  "nets": {'
    - '    "1": {'
    - '      "vms": {'
    - '        "1": {'
    - '          "image": "Standard_Ubuntu_22.04_latest",'
    - '          "image_size": 16,'
    - '          "flavor": "s3.medium.4",'
    - '          "eip": true,'
    - '          "sg": ['
    - '            "22/tcp",'
    - '            "80/tcp",'
    - '            "443/tcp"'
    - '          ],'
    - '          "user_data": {'
    - '            "debug": true,'
    - '            "disable_root": false,'
    - '            "package_update": true,'
    - '            "package_reboot_if_required": true,'
    - '            "packages": ['
    - '              "pwgen",'
    - '              "micro",'
    - '              "python3-venv",'
    - '              "zip",'
    - '              "sslh",'
    - '              "dos2unix",'
    - '              "apache2"'
    - '            ],'
    - '            "write_files": ['
    - '              {'
    - '                "owner": "root:root",'
    - '                "path": "/etc/apache2/sites-available/sys1.otc1.cloudkit7.xyz.conf",'
    - '                "permissions": "0644",'
    - '                "content": "<IfModule mod_ssl.c>\n  <VirtualHost 127.0.00.1:8443>\n    ServerAdmin
      admin@localhost\n    ServerName sys1.otc1.cloudkit7.xyz\n    DocumentRoot /var/www/html\n\n    #   A
      self-signed (snakeoil) certificate can be created by installing\n    #   the
      ssl-cert package. See\n    #   /usr/share/doc/apache2/README.Debian.gz for more
      info.\n    #   If both key and certificate are stored in the same file, only
      the\n    #   SSLCertificateFile directive is needed.\n    SSLCertificateFile      /root/.acme.sh/sys1.otc1.cloudkit7.xyz_ecc/fullchain.cer\n    SSLCertificateKeyFile   /root/.acme.sh/sys1.otc1.cloudkit7.xyz_ecc/sys1.otc1.cloudkit7.xyz.key\n\n    #   SSL
      Engine Switch:\n    #   Enable/Disable SSL for this virtual host.\n    SSLEngine
      on\n\n    # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,\n    #
      - error, crit, alert, emerg.\n    # It is also possible to configure the loglevel
      for particular\n    # modules, e.g.\n    #LogLevel info ssl:warn\n\n    ErrorLog
      ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n    #
      For most configuration files from conf-available/, which are\n    # enabled
      or disabled at a global level, it is possible to\n    # .include a line for
      only one particular virtual host. For example the\n    # following line enables
      the CGI configuration for this host only\n    # after it has been globally disabled
      with \"a2disconf\".\n    #Include conf-available/serve-cgi-bin.conf\n\n    #   Server
      Certificate Chain:\n    #   Point SSLCertificateChainFile at a file containing
      the\n    #   concatenation of PEM encoded CA certificates which form the\n    #   certificate
      chain for the server certificate. Alternatively\n    #   the referenced file
      can be the same as SSLCertificateFile\n    #   when the CA certificates are
      directly appended to the server\n    #   certificate for convinience.\n    #SSLCertificateChainFile
      /etc/apache2/ssl.crt/server-ca.crt\n\n    #   Certificate Authority (CA):\n    #   Set
      the CA certificate verification path where to find CA\n    #   certificates
      for client authentication or alternatively one\n    #   huge file containing
      all of them (file must be PEM encoded)\n    #   Note: Inside SSLCACertificatePath
      you need hash symlinks\n    #                to point to the certificate files.
      Use the provided\n    #                Makefile to update the hash symlinks
      after changes.\n    #SSLCACertificatePath /etc/ssl/certs/\n    #SSLCACertificateFile
      /etc/apache2/ssl.crt/ca-bundle.crt\n\n    #   Certificate Revocation Lists (CRL):\n    #   Set
      the CA revocation path where to find CA CRLs for client\n    #   authentication
      or alternatively one huge file containing all\n    #   of them (file must be
      PEM encoded)\n    #   Note: Inside SSLCARevocationPath you need hash symlinks\n    #                to
      point to the certificate files. Use the provided\n    #                Makefile
      to update the hash symlinks after changes.\n    #SSLCARevocationPath /etc/apache2/ssl.crl/\n    #SSLCARevocationFile
      /etc/apache2/ssl.crl/ca-bundle.crl\n\n    #   Client Authentication (Type):\n    #   Client
      certificate verification type and depth.  Types are\n    #   none, optional,
      require and optional_no_ca.  Depth is a\n    #   number which specifies how
      deeply to verify the certificate\n    #   issuer chain before deciding the certificate
      is not valid.\n    #SSLVerifyClient require\n    #SSLVerifyDepth  10\n\n    #   SSL
      Engine Options:\n    #   Set various options for the SSL engine.\n    #   o
      FakeBasicAuth:\n    #        Translate the client X.509 into a Basic Authorisation.  This
      means that\n    #        the standard Auth/DBMAuth methods can be used for access
      control.  The\n    #        user name is the `one line'' version of the client''s
      X.509 certificate.\n    #        Note that no password is obtained from the
      user. Every entry in the user\n    #        file needs this password: `xxj31ZMTZzkVA''.\n    #   o
      ExportCertData:\n    #        This exports two additional environment variables:
      SSL_CLIENT_CERT and\n    #        SSL_SERVER_CERT. These contain the PEM-encoded
      certificates of the\n    #        server (always existing) and the client (only
      existing when client\n    #        authentication is used). This can be used
      to import the certificates\n    #        into CGI scripts.\n    #   o StdEnvVars:\n    #        This
      exports the standard SSL/TLS related `SSL_*'' environment variables.\n    #        Per
      default this exportation is switched off for performance reasons,\n    #        because
      the extraction step is an expensive operation and is usually\n    #        useless
      for serving static content. So one usually enables the\n    #        exportation
      for CGI and SSI requests only.\n    #   o OptRenegotiate:\n    #        This
      enables optimized SSL connection renegotiation handling when SSL\n    #        directives
      are used in per-directory context.\n    #SSLOptions +FakeBasicAuth +ExportCertData
      +StrictRequire\n    <FilesMatch \"\\.(cgi|shtml|phtml|php)$\">\n                    SSLOptions
      +StdEnvVars\n    </FilesMatch>\n    <Directory /usr/lib/cgi-bin>\n                    SSLOptions
      +StdEnvVars\n    </Directory>\n\n    #   SSL Protocol Adjustments:\n    #   The
      safe and default but still SSL/TLS standard compliant shutdown\n    #   approach
      is that mod_ssl sends the close notify alert but doesn''t wait for\n    #   the
      close notify alert from client. When you need a different shutdown\n    #   approach
      you can use one of the following variables:\n    #   o ssl-unclean-shutdown:\n    #        This
      forces an unclean shutdown when the connection is closed, i.e. no\n    #        SSL
      close notify alert is send or allowed to received.  This violates\n    #        the
      SSL/TLS standard but is needed for some brain-dead browsers. Use\n    #        this
      when you receive I/O errors because of the standard approach where\n    #        mod_ssl
      sends the close notify alert.\n    #   o ssl-accurate-shutdown:\n    #        This
      forces an accurate shutdown when the connection is closed, i.e. a\n    #        SSL
      close notify alert is send and mod_ssl waits for the close notify\n    #        alert
      of the client. This is 100% SSL/TLS standard compliant, but in\n    #        practice
      often causes hanging connections with brain-dead browsers. Use\n    #        this
      only for browsers where you know that their SSL implementation\n    #        works
      correctly.\n    #   Notice: Most problems of broken clients are also related
      to the HTTP\n    #   keep-alive facility, so you usually additionally want to
      disable\n    #   keep-alive for those clients, too. Use variable \"nokeepalive\"
      for this.\n    #   Similarly, one has to force some clients to use HTTP/1.0
      to workaround\n    #   their broken HTTP/1.1 implementation. Use variables \"downgrade-1.0\"
      and\n    #   \"force-response-1.0\" for this.\n    # BrowserMatch \"MSIE [2-6]\"
      \\\n    #               nokeepalive ssl-unclean-shutdown \\\n    #               downgrade-1.0
      force-response-1.0\n\n  </VirtualHost>\n</IfModule>\n"'
    - '              }'
    - '            ],'
    - '            "users": ['
    - '              {'
    - '                "name": "linux",'
    - '                "sudo": ['
    - '                  "ALL=(ALL) NOPASSWD:ALL"'
    - '                ],'
    - '                "groups": "users",'
    - '                "lock_passwd": false,'
    - '                "shell": "/bin/bash",'
    - "                \"passwd\": \"\x01___$\","
    - '                "ssh_authorized_keys": ['
    - '                  "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDSEvM7HAgHOIs6GZPVNJMa1Wqzcyk1JcV+hSkoNAf54sF0BbEX6eaA0Vkw7oT9PZPiCTEXdXS4rjApFWvGUj7RWVJiHL5uCGJgqcZsfUyW9YgPFo0HpNWJbxCVt+cxZi1GfO94o3xUVsWYxpDAkIi5uxOGlxhgi8UTAIt2cjIayNwh2V97EDIxGFBEC+tfdiRf4v6Uz0U6r+UMCx6LpOzxdYbKxk/ggShIZZu+AU/p8ykx7iEhYkngTuYY+cGZHa3iUVNf+gJXwjCzvxPj94ml/p5Emq15ICsflzUVLLNJJEdJhsJ2pGR5MgSHjgTlvx1ldJ/QjpuVYtJpbZgpRVk9/Oc682PY8heZMyV7VNWbjyotwMhvC/3SCpibDFLaS71gw+N0d8eTIngTXQY7f40rNEPVVhductmfhr6/qeKdj32JSumyHkGimoWGBOo/p0e/2HgF3SaOkxD5StxL9ljPSKG3p3+pguQj9/EjEraD3jKlc3+VF5G3q/afbEWL82fKlvUEUWddTAA1bzqqBEXFqdaRRgQJtyUlKzkeREzptNJfiOnH3SqA6hXO5UInO5ZrAZQpyOONalw889WoBXwELfYIbYCqBXavabNq7B+1zaYrIRGym5kgSw+7k60St4rwYfJzhTKHXYsTIrVwe16zkI4WAqs9MTCO+Kpn9if3Hw==
      linux"'
    - '                ]'
    - '              }'
    - '            ],'
    - '            "runcmd": ['
    - '              "growpart /dev/vda 1",'
    - '              "resize2fs /dev/vda1",'
    - '              "for i in $(resolvectl status | grep Link | cut -d\"(\" -f2 |
      cut -d\")\" -f1) ; do resolvectl domain $i sys1.nova ; done",'
    - '              "[ ! -f /etc/rc.local ] && ( echo ''#!/bin/bash'' > /etc/rc.local
      ; chmod 755 /etc/rc.local )",'
    - '              "echo ''for i in $(resolvectl status | grep Link | cut -d\"(\"
      -f2 | cut -d\")\" -f1) ; do resolvectl domain $i sys1.nova ; done'' >> /etc/rc.local",'
    - '              "sed -i~ -e ''s/^127\\.0\\.0\\.1\\s*.*$/127.0.0.1 localhost ''$(uname
      -n)''/'' /etc/hosts",'
    - '              "sed -i~ -e ''s/^.*AllowTcpForwarding.*/AllowTcpForwarding yes/''
      /etc/ssh/sshd_config",'
    - '              "service sshd restart",'
    - '              "sed -i~ -e ''s/Listen 443[^0-9]*$/Listen 127.0.00.1:8443 https/''
      /etc/apache2/ports.conf",'
    - '              "sed -i~ -e ''s/<change-me>/0.0.0.0/'' -e ''s/--ssl 127.0.0.1:443/--tls
      127.0.00.1:8443/'' /etc/default/sslh",'
    - '              "service sslh restart",'
    - '              "wget -O- https://get.acme.sh | env HOME=\"$(dirname /root/.acme.sh)\"
      sh -s email=\"alejandrol@t-systems.com\"",'
    - '              "/root/.acme.sh/acme.sh --issue --server letsencrypt.org --home
      /root/.acme.sh -w /var/www/html -d sys1.otc1.cloudkit7.xyz",'
    - '              "# Take care of possible non-ECC certificates -- Not fully tested.\nset
      -x\nif [ -f \"/etc/apache2/sites-available/sys1.otc1.cloudkit7.xyz.conf\" ]
      ; then\n  if [ -d \"/root/.acme.sh\" ] && [ ! -d \"/root/.acme.sh/sys1.otc1.cloudkit7.xyz_ecc\"
      ] && [ -d \"/root/.acme.sh/sys1.otc1.cloudkit7.xyz\" ] ; then\n    if grep \"/sys1.otc1.cloudkit7.xyz_ecc/\"
      \"/etc/apache2/sites-available/sys1.otc1.cloudkit7.xyz.conf\" ; then\n      sed
      -i_eccfix -e ''s!/sys1.otc1.cloudkit7.xyz_ecc/!sys1.otc1.cloudkit7.xyz/!'' \"/etc/apache2/sites-available/sys1.otc1.cloudkit7.xyz.conf\"\n    fi\n  fi\nfi\n",'
    - '              "echo \"0 0 * * * root /root/.acme.sh/acme.sh --cron --server
      letsencrypt.org -w /var/www/html --home /root/.acme.sh --reloadcmd ''service
      apache2 force-reload''> /dev/null\" > /etc/cron.d/acme_sh",'
    - '              "[ ! -f /etc/rc.local ] && ( echo ''#!/bin/bash'' > /etc/rc.local
      ; chmod 755 /etc/rc.local )",'
    - '              "echo \"/root/.acme.sh/acme.sh --cron --server letsencrypt.org
      -w /var/www/html --home /root/.acme.sh --reloadcmd ''service apache2 force-reload''\"
      >> /etc/rc.local",'
    - '              "a2ensite sys1.otc1.cloudkit7.xyz",'
    - '              "a2enmod ssl",'
    - '              "a2enmod proxy",'
    - '              "a2enmod proxy_http",'
    - '              "a2enmod proxy_wstunnel",'
    - '              "service apache2 restart"'
    - '            ]'
    - '          },'
    - '          "cname": "sys1"'
    - '        }'
    - '      }'
    - '    }'
    - '  }'
    - '}'
    - ''
  - - ''
- - -Idata/snippets -DUSE_ACME -DSID=tsv2 --json data/ts-v2.yaml
  - 0
  - - '{'
    - '  "sid": "tsv2",'
    - '  "snat": true,'
    - '  "sgs": {'
    - '    "basic": ['
    - '      "22/tcp",'
    - '      "443/tcp"'
    - '    ]'
    - '  },'
    - '  "nets": {'
    - '    "1": {'
    - '      "vms": {'
    - '        "1": {'
    - '          "image": "Standard_Ubuntu_22.04_latest",'
    - '          "image_size": 16,'
    - '          "flavor": "s3.medium.4",'
    - '          "eip": true,'
    - '          "sg": ['
    - '            "22/tcp",'
    - '            "80/tcp",'
    - '            "443/tcp"'
    - '          ],'
    - '          "user_data": {'
    - '            "debug": true,'
    - '            "disable_root": false,'
    - '            "package_update": true,'
    - '            "package_reboot_if_required": true,'
    - '            "packages": ['
    - '              "pwgen",'
    - '              "micro",'
    - '              "python3-venv",'
    - '              "zip",'
    - '              "sslh",'
    - '              "xfce4",'
    - '              "xfce4-goodies",'
    - '              "xubuntu-icon-theme",'
    - '              "gnome-icon-theme",'
    - '              "tango-icon-theme",'
    - '              "firefox",'
    - '              "geany",'
    - '              "tigervnc-viewer",'
    - '              "libvte9",'
    - '              "doc-base",'
    - '              "devhelp",'
    - '              "libnotify-bin",'
    - '              "yelp",'
    - '              "xorg",'
    - '              "xserver-xorg-legacy",'
    - '              "xserver-xorg-video-all",'
    - '              "mesa-utils",'
    - '              "xfonts-base",'
    - '              "xfonts-100dpi",'
    - '              "xfonts-75dpi",'
    - '              "xfonts-scalable",'
    - '              "x11-xserver-utils",'
    - '              "xbitmaps",'
    - '              "xclip",'
    - '              "xrdp",'
    - '              "xorgxrdp",'
    - '              "dos2unix",'
    - '              "docker.io",'
    - '              "apache2",'
    - '              "mariadb-server",'
    - '              "graphviz",'
    - '              "php",'
    - '              "php-mysql",'
    - '              "php-ldap",'
    - '              "php-cli",'
    - '              "php-soap",'
    - '              "php-json",'
    - '              "php-xml",'
    - '              "php-gd",'
    - '              "php-zip",'
    - '              "php-curl",'
    - '              "php-yaml",'
    - '              "libapache2-mod-php",'
    - '              "php-mbstring"'
    - '            ],'
    - '            "write_files": ['
    - '              {'
    - '                "owner": "root:root",'
    - '                "path": "/etc/apache2/sites-available/tsv2.otc1.cloudkit7.xyz.conf",'
    - '                "permissions": "0644",'
    - '                "content": "<IfModule mod_ssl.c>\n  <VirtualHost 127.0.00.1:8443>\n    ServerAdmin
      admin@localhost\n    ServerName tsv2.otc1.cloudkit7.xyz\n    DocumentRoot /var/www/html\n\n    #   A
      self-signed (snakeoil) certificate can be created by installing\n    #   the
      ssl-cert package. See\n    #   /usr/share/doc/apache2/README.Debian.gz for more
      info.\n    #   If both key and certificate are stored in the same file, only
      the\n    #   SSLCertificateFile directive is needed.\n    SSLCertificateFile      /root/.acme.sh/tsv2.otc1.cloudkit7.xyz_ecc/fullchain.cer\n    SSLCertificateKeyFile   /root/.acme.sh/tsv2.otc1.cloudkit7.xyz_ecc/tsv2.otc1.cloudkit7.xyz.key\n\n    #   SSL
      Engine Switch:\n    #   Enable/Disable SSL for this virtual host.\n    SSLEngine
      on\n\n    # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,\n    #
      - error, crit, alert, emerg.\n    # It is also possible to configure the loglevel
      for particular\n    # modules, e.g.\n    #LogLevel info ssl:warn\n\n    ErrorLog
      ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n    #
      For most configuration files from conf-available/, which are\n    # enabled
      or disabled at a global level, it is possible to\n    # .include a line for
      only one particular virtual host. For example the\n    # following line enables
      the CGI configuration for this host only\n    # after it has been globally disabled
      with \"a2disconf\".\n    #Include conf-available/serve-cgi-bin.conf\n\n    #   Server
      Certificate Chain:\n    #   Point SSLCertificateChainFile at a file containing
      the\n    #   concatenation of PEM encoded CA certificates which form the\n    #   certificate
      chain for the server certificate. Alternatively\n    #   the referenced file
      can be the same as SSLCertificateFile\n    #   when the CA certificates are
      directly appended to the server\n    #   certificate for convinience.\n    #SSLCertificateChainFile
      /etc/apache2/ssl.crt/server-ca.crt\n\n    #   Certificate Authority (CA):\n    #   Set
      the CA certificate verification path where to find CA\n    #   certificates
      for client authentication or alternatively one\n    #   huge file containing
      all of them (file must be PEM encoded)\n    #   Note: Inside SSLCACertificatePath
      you need hash symlinks\n    #                to point to the certificate files.
      Use the provided\n    #                Makefile to update the hash symlinks
      after changes.\n    #SSLCACertificatePath /etc/ssl/certs/\n    #SSLCACertificateFile
      /etc/apache2/ssl.crt/ca-bundle.crt\n\n    #   Certificate Revocation Lists (CRL):\n    #   Set
      the CA revocation path where to find CA CRLs for client\n    #   authentication
      or alternatively one huge file containing all\n    #   of them (file must be
      PEM encoded)\n    #   Note: Inside SSLCARevocationPath you need hash symlinks\n    #                to
      point to the certificate files. Use the provided\n    #                Makefile
      to update the hash symlinks after changes.\n    #SSLCARevocationPath /etc/apache2/ssl.crl/\n    #SSLCARevocationFile
      /etc/apache2/ssl.crl/ca-bundle.crl\n\n    #   Client Authentication (Type):\n    #   Client
      certificate verification type and depth.  Types are\n    #   none, optional,
      require and optional_no_ca.  Depth is a\n    #   number which specifies how
      deeply to verify the certificate\n    #   issuer chain before deciding the certificate
      is not valid.\n    #SSLVerifyClient require\n    #SSLVerifyDepth  10\n\n    #   SSL
      Engine Options:\n    #   Set various options for the SSL engine.\n    #   o
      FakeBasicAuth:\n    #        Translate the client X.509 into a Basic Authorisation.  This
      means that\n    #        the standard Auth/DBMAuth methods can be used for access
      control.  The\n    #        user name is the `one line'' version of the client''s
      X.509 certificate.\n    #        Note that no password is obtained from the
      user. Every entry in the user\n    #        file needs this password: `xxj31ZMTZzkVA''.\n    #   o
      ExportCertData:\n    #        This exports two additional environment variables:
      SSL_CLIENT_CERT and\n    #        SSL_SERVER_CERT. These contain the PEM-encoded
      certificates of the\n    #        server (always existing) and the client (only
      existing when client\n    #        authentication is used). This can be used
      to import the certificates\n    #        into CGI scripts.\n    #   o StdEnvVars:\n    #        This
      exports the standard SSL/TLS related `SSL_*'' environment variables.\n    #        Per
      default this exportation is switched off for performance reasons,\n    #        because
      the extraction step is an expensive operation and is usually\n    #        useless
      for serving static content. So one usually enables the\n    #        exportation
      for CGI and SSI requests only.\n    #   o OptRenegotiate:\n    #        This
      enables optimized SSL connection renegotiation handling when SSL\n    #        directives
      are used in per-directory context.\n    #SSLOptions +FakeBasicAuth +ExportCertData
      +StrictRequire\n    <FilesMatch \"\\.(cgi|shtml|phtml|php)$\">\n                    SSLOptions
      +StdEnvVars\n    </FilesMatch>\n    <Directory /usr/lib/cgi-bin>\n                    SSLOptions
      +StdEnvVars\n    </Directory>\n\n    #   SSL Protocol Adjustments:\n    #   The
      safe and default but still SSL/TLS standard compliant shutdown\n    #   approach
      is that mod_ssl sends the close notify alert but doesn''t wait for\n    #   the
      close notify alert from client. When you need a different shutdown\n    #   approach
      you can use one of the following variables:\n    #   o ssl-unclean-shutdown:\n    #        This
      forces an unclean shutdown when the connection is closed, i.e. no\n    #        SSL
      close notify alert is send or allowed to received.  This violates\n    #        the
      SSL/TLS standard but is needed for some brain-dead browsers. Use\n    #        this
      when you receive I/O errors because of the standard approach where\n    #        mod_ssl
      sends the close notify alert.\n    #   o ssl-accurate-shutdown:\n    #        This
      forces an accurate shutdown when the connection is closed, i.e. a\n    #        SSL
      close notify alert is send and mod_ssl waits for the close notify\n    #        alert
      of the client. This is 100% SSL/TLS standard compliant, but in\n    #        practice
      often causes hanging connections with brain-dead browsers. Use\n    #        this
      only for browsers where you know that their SSL implementation\n    #        works
      correctly.\n    #   Notice: Most problems of broken clients are also related
      to the HTTP\n    #   keep-alive facility, so you usually additionally want to
      disable\n    #   keep-alive for those clients, too. Use variable \"nokeepalive\"
      for this.\n    #   Similarly, one has to force some clients to use HTTP/1.0
      to workaround\n    #   their broken HTTP/1.1 implementation. Use variables \"downgrade-1.0\"
      and\n    #   \"force-response-1.0\" for this.\n    # BrowserMatch \"MSIE [2-6]\"
      \\\n    #               nokeepalive ssl-unclean-shutdown \\\n    #               downgrade-1.0
      force-response-1.0\n\n  </VirtualHost>\n</IfModule>\n"'
    - '              }'
    - '            ],'
    - '            "users": ['
    - '              {'
    - '                "name": "linux",'
    - '                "sudo": ['
    - '                  "ALL=(ALL) NOPASSWD:ALL"'
    - '                ],'
    - '                "groups": "users",'
    - '                "lock_passwd": false,'
    - '                "shell": "/bin/bash",'
    - "                \"passwd\": \"\x01___$\","
    - '                "ssh_authorized_keys": ['
    - '                  "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDSEvM7HAgHOIs6GZPVNJMa1Wqzcyk1JcV+hSkoNAf54sF0BbEX6eaA0Vkw7oT9PZPiCTEXdXS4rjApFWvGUj7RWVJiHL5uCGJgqcZsfUyW9YgPFo0HpNWJbxCVt+cxZi1GfO94o3xUVsWYxpDAkIi5uxOGlxhgi8UTAIt2cjIayNwh2V97EDIxGFBEC+tfdiRf4v6Uz0U6r+UMCx6LpOzxdYbKxk/ggShIZZu+AU/p8ykx7iEhYkngTuYY+cGZHa3iUVNf+gJXwjCzvxPj94ml/p5Emq15ICsflzUVLLNJJEdJhsJ2pGR5MgSHjgTlvx1ldJ/QjpuVYtJpbZgpRVk9/Oc682PY8heZMyV7VNWbjyotwMhvC/3SCpibDFLaS71gw+N0d8eTIngTXQY7f40rNEPVVhductmfhr6/qeKdj32JSumyHkGimoWGBOo/p0e/2HgF3SaOkxD5StxL9ljPSKG3p3+pguQj9/EjEraD3jKlc3+VF5G3q/afbEWL82fKlvUEUWddTAA1bzqqBEXFqdaRRgQJtyUlKzkeREzptNJfiOnH3SqA6hXO5UInO5ZrAZQpyOONalw889WoBXwELfYIbYCqBXavabNq7B+1zaYrIRGym5kgSw+7k60St4rwYfJzhTKHXYsTIrVwe16zkI4WAqs9MTCO+Kpn9if3Hw==
      linux"'
    - '                ]'
    - '              }'
    - '            ],'
    - '            "runcmd": ['
    - '              "growpart /dev/vda 1",'
    - '              "resize2fs /dev/vda1",'
    - '              "for i in $(resolvectl status | grep Link | cut -d\"(\" -f2 |
      cut -d\")\" -f1) ; do resolvectl domain $i tsv2.nova ; done",'
    - '              "[ ! -f /etc/rc.local ] && ( echo ''#!/bin/bash'' > /etc/rc.local
      ; chmod 755 /etc/rc.local )",'
    - '              "echo ''for i in $(resolvectl status | grep Link | cut -d\"(\"
      -f2 | cut -d\")\" -f1) ; do resolvectl domain $i tsv2.nova ; done'' >> /etc/rc.local",'
    - '              "sed -i~ -e ''s/^127\\.0\\.0\\.1\\s*.*$/127.0.0.1 localhost ''$(uname
      -n)''/'' /etc/hosts",'
    - '              "sed -i~ -e ''s/^.*AllowTcpForwarding.*/AllowTcpForwarding yes/''
      /etc/ssh/sshd_config",'
    - '              "service sshd restart",'
    - '              "sed -i~ -e ''s/Listen 443[^0-9]*$/Listen 127.0.00.1:8443 https/''
      /etc/apache2/ports.conf",'
    - '              "sed -i~ -e ''s/<change-me>/0.0.0.0/'' -e ''s/--ssl 127.0.0.1:443/--tls
      127.0.00.1:8443/'' /etc/default/sslh",'
    - '              "service sslh restart",'
    - '              "wget -O- https://get.acme.sh | env HOME=\"$(dirname /root/.acme.sh)\"
      sh -s email=\"alejandrol@t-systems.com\"",'
    - '              "/root/.acme.sh/acme.sh --issue --server letsencrypt.org --home
      /root/.acme.sh -w /var/www/html -d tsv2.otc1.cloudkit7.xyz",'
    - '              "# Take care of possible non-ECC certificates -- Not fully tested.\nset
      -x\nif [ -f \"/etc/apache2/sites-available/tsv2.otc1.cloudkit7.xyz.conf\" ]
      ; then\n  if [ -d \"/root/.acme.sh\" ] && [ ! -d \"/root/.acme.sh/tsv2.otc1.cloudkit7.xyz_ecc\"
      ] && [ -d \"/root/.acme.sh/tsv2.otc1.cloudkit7.xyz\" ] ; then\n    if grep \"/tsv2.otc1.cloudkit7.xyz_ecc/\"
      \"/etc/apache2/sites-available/tsv2.otc1.cloudkit7.xyz.conf\" ; then\n      sed
      -i_eccfix -e ''s!/tsv2.otc1.cloudkit7.xyz_ecc/!tsv2.otc1.cloudkit7.xyz/!'' \"/etc/apache2/sites-available/tsv2.otc1.cloudkit7.xyz.conf\"\n    fi\n  fi\nfi\n",'
    - '              "echo \"0 0 * * * root /root/.acme.sh/acme.sh --cron --server
      letsencrypt.org -w /var/www/html --home /root/.acme.sh --reloadcmd ''service
      apache2 force-reload''> /dev/null\" > /etc/cron.d/acme_sh",'
    - '              "[ ! -f /etc/rc.local ] && ( echo ''#!/bin/bash'' > /etc/rc.local
      ; chmod 755 /etc/rc.local )",'
    - '              "echo \"/root/.acme.sh/acme.sh --cron --server letsencrypt.org
      -w /var/www/html --home /root/.acme.sh --reloadcmd ''service apache2 force-reload''\"
      >> /etc/rc.local",'
    - '              "a2ensite tsv2.otc1.cloudkit7.xyz",'
    - '              "a2enmod ssl",'
    - '              "a2enmod proxy",'
    - '              "a2enmod proxy_http",'
    - '              "a2enmod proxy_wstunnel",'
    - '              "service apache2 restart"'
    - '            ]'
    - '          },'
    - '          "cname": "tsv2"'
    - '        }'
    - '      }'
    - '    }'
    - '  }'
    - '}'
    - ''
  - - ''
